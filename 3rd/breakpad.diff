diff --git a/src/client/linux/handler/exception_handler.cc b/src/client/linux/handler/exception_handler.cc
index ca353c40..32faedf3 100644
--- a/src/client/linux/handler/exception_handler.cc
+++ b/src/client/linux/handler/exception_handler.cc
@@ -138,7 +138,7 @@ void InstallAlternateStackLocked() {
   // SIGSTKSZ may be too small to prevent the signal handlers from overrunning
   // the alternative stack. Ensure that the size of the alternative stack is
   // large enough.
-  static const unsigned kSigStackSize = std::max(16384, SIGSTKSZ);
+  static const unsigned kSigStackSize = std::max(16384L, (long)SIGSTKSZ);
 
   // Only set an alternative stack if there isn't already one, or if the current
   // one is too small.
diff --git a/src/client/linux/handler/minidump_descriptor.h b/src/client/linux/handler/minidump_descriptor.h
index c7e4f2b3..4f65b2f6 100644
--- a/src/client/linux/handler/minidump_descriptor.h
+++ b/src/client/linux/handler/minidump_descriptor.h
@@ -37,7 +37,7 @@
 
 #include "client/linux/handler/microdump_extra_info.h"
 #include "common/using_std_string.h"
-
+#include <cstdint>
 // This class describes how a crash dump should be generated, either:
 // - Writing a full minidump to a file in a given directory (the actual path,
 //   inside the directory, is determined by this class).
diff --git a/src/common/android/testing/include/wchar.h b/src/common/android/testing/include/wchar.h
index 85373fd2..8d36d895 100644
--- a/src/common/android/testing/include/wchar.h
+++ b/src/common/android/testing/include/wchar.h
@@ -53,6 +53,7 @@ static wchar_t inline wcstolower(wchar_t ch) {
   return ch;
 }
 
+#if 0
 static int inline wcscasecmp(const wchar_t* s1, const wchar_t* s2) {
   for (;;) {
     wchar_t c1 = wcstolower(*s1);
@@ -67,6 +68,7 @@ static int inline wcscasecmp(const wchar_t* s1, const wchar_t* s2) {
     s2++;
   }
 }
+#endif
 
 #ifdef __cplusplus
 }  // extern "C"
diff --git a/src/common/linux/memory_mapped_file.cc b/src/common/linux/memory_mapped_file.cc
index 99362945..aad9e14f 100644
--- a/src/common/linux/memory_mapped_file.cc
+++ b/src/common/linux/memory_mapped_file.cc
@@ -42,6 +42,11 @@
 #include "common/memory_range.h"
 #include "third_party/lss/linux_syscall_support.h"
 
+#if defined(__ARM_EABI__) || defined(__i686__)
+#define sys_mmap mmap
+#endif
+
+
 namespace google_breakpad {
 
 MemoryMappedFile::MemoryMappedFile() {}
diff --git a/src/common/memory_allocator.h b/src/common/memory_allocator.h
index d28fbfc3..49368c32 100644
--- a/src/common/memory_allocator.h
+++ b/src/common/memory_allocator.h
@@ -49,6 +49,9 @@
 #else
 #include "third_party/lss/linux_syscall_support.h"
 #endif
+#if defined(__ARM_EABI__) || defined(__i686__)
+    #define sys_mmap mmap
+#endif
 
 namespace google_breakpad {
 
diff --git a/src/processor/exploitability_linux.cc b/src/processor/exploitability_linux.cc
index 798056df..c812cc54 100644
--- a/src/processor/exploitability_linux.cc
+++ b/src/processor/exploitability_linux.cc
@@ -516,7 +516,7 @@ bool ExploitabilityLinux::DisassembleBytes(const string& architecture,
            raw_bytes_tmpfile);
   FILE* objdump_fp = popen(cmd, "r");
   if (!objdump_fp) {
-    fclose(objdump_fp);
+    if (objdump_fp != NULL) fclose(objdump_fp);
     unlink(raw_bytes_tmpfile);
     BPLOG(ERROR) << "Failed to call objdump.";
     return false;
